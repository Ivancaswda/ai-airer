// /app/api/ai-trip/route.ts

import { NextRequest, NextResponse } from "next/server";
import getServerUser from "@/lib/auth-server";
import { GoogleGenerativeAI } from "@google/generative-ai";
import {aj} from "@/app/api/arcjet/route";
import {handleGeminiError} from "@/lib/utils";

const GEMINI_API_KEY = process.env.GEMINI_API_KEY!;

const PROMPT = `
–¢—ã ‚Äî —Ç–æ—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å —É—á—ë—Ç–æ–º –ø–æ–≥–æ–¥—ã.
–ó–∞–¥–∞–≤–∞–π **–æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑** –∏ –∂–¥–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.

–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:

1. –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∞) ‚Äî –ø—Ä–∏–Ω–∏–º–∞–π –ª—é–±—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
2. –ú–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ø–Ω–≤–∞—Ä—å, –ú–∞—Ä—Ç, –ê–≤–≥—É—Å—Ç) ‚Äî –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ 12 –º–µ—Å—è—Ü–µ–≤.
3. –¢–∏–ø –ø–æ–µ–∑–¥–∫–∏ ‚Äî –æ–¥–Ω–æ –∏–∑: "–û—Ç–ø—É—Å–∫", "–ë–∏–∑–Ω–µ—Å", "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", "–°–µ–º—å—è".
4. –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–≥–æ–¥–µ ‚Äî –æ–¥–Ω–æ –∏–∑: "–¢–µ–ø–ª—ã–π", "–•–æ–ª–æ–¥–Ω—ã–π", "–°—É—Ö–æ–π", "–í–ª–∞–∂–Ω—ã–π".

**–¢–†–ï–ë–£–ï–¢–°–Ø –°–¢–†–û–ì–û JSON-–û–¢–í–ï–¢:**
–í–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç:

{
  "resp": "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
  "ui": "destination" | "month" | "tripType" | "weatherPref" | "final"
}

–ü—Ä–∞–≤–∏–ª–∞:
- –ó–∞–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑.
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON.
`;

const FINAL_PROMPT = `
–ò—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é —Å —É—á—ë—Ç–æ–º –ø–æ–≥–æ–¥—ã –≤ **—Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON**.

–í–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç:

{
  "weather_plan": {
    "destination": "string",
    "month": "string",
    "trip_type": "string",
    "weather_preference": "string",
    "expected_weather": {
      "avg_temp_c": "number",
      "rain_days": "number",
      "humidity_percent": "number"
    },
    "recommendation": "string",
    "clothing_advice": "string",
    "activity_suggestion": "string"
  }
}

–í–∞–∂–Ω–æ:
- –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ markdown.
- –ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏.
`;

function cleanJSON(content: string) {
    return content
        .replace(/```json/g, "")
        .replace(/```/g, "")
        .replace(/\r?\n|\r/g, "")
        .replace(/\s{2,}/g, " ")
        .trim();
}

function safeParseJSON(jsonString: string) {
    const cleaned = cleanJSON(jsonString);
    try {
        return { ok: true, data: JSON.parse(cleaned) };
    } catch (error: any) {
        return { ok: false, raw: jsonString, error: error.message };
    }
}

export async function POST(req: NextRequest) {
    try {
        const { messages, isFinal } = await req.json();
        const user = await getServerUser();
        if (!user) {
            return NextResponse.json({ error: "No authorized"})
        }
        if (!user?.isPrem) {
            const decision = await aj.protect(req, { userId: user.userId, requested: 1 });

            if (decision.isDenied()) {
                return NextResponse.json({ error: "Free limit exceeded", redirect: "/premium" }, { status: 403 });
            }
        }

        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

        const fullPrompt = [
            { role: "system", content: isFinal ? FINAL_PROMPT : PROMPT },
            ...messages.map(({ role, content }: any) => ({ role, content }))
        ];

        const result = await model.generateContent(fullPrompt.map(m => m.content).join("\n"));

        const parsed = safeParseJSON(result.response.text());

        if (!parsed.ok) {
            return NextResponse.json(
                { error: "Invalid JSON from Gemini", raw: result.response.text() },
                { status: 500 }
            );
        }

        return NextResponse.json(parsed.data);

    } catch (err: any) {
        const error = handleGeminiError(err);
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /api/budget Gemini SDK:", err);

        if (error.isLocationError) {
            return NextResponse.json({ error: error.message, code: "LOCATION_BLOCKED" }, { status: 403 });
        }
        if (err?.response?.status === 429) {
            return NextResponse.json(
                { error: "üö¶ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ API-–∫–ª—é—á –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", code: "QUOTA_EXCEEDED" },
                { status: 429 }
            );
        }

        return NextResponse.json({ error: error.message }, { status: 500 });
    }
}
