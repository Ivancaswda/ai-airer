import { NextRequest, NextResponse } from "next/server";
import getServerUser from "@/lib/auth-server";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { aj } from "@/app/api/arcjet/route";
import {handleGeminiError} from "@/lib/utils";

const GEMINI_API_KEY = process.env.GEMINI_API_KEY!;

const PROMPT = `
–¢—ã ‚Äî —Ç–æ—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º. –ó–∞–¥–∞–≤–∞–π **–æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑** –∏ –∂–¥–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.

–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—Ä–æ–≥–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:

1. –û—Ç–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞) ‚Äî –ø—Ä–∏–Ω–∏–º–∞–π –ª—é–±—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É. –ü—Ä–∏–º–µ—Ä—ã: "–ü–∞—Ä–∏–∂", "–§—Ä–∞–Ω—Ü–∏—è".
2. –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞) ‚Äî –ø—Ä–∏–Ω–∏–º–∞–π –ª—é–±—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É. –ü—Ä–∏–º–µ—Ä—ã: "–ù—å—é-–ô–æ—Ä–∫", "–°–®–ê".
3. –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã ‚Äî **–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ –∏–∑: "–û–¥–∏–Ω", "–ü–∞—Ä–∞", "–°–µ–º—å—è", "–î—Ä—É–∑—å—è"**.
4. –ë—é–¥–∂–µ—Ç ‚Äî **–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ –∏–∑: "–≠–∫–æ–Ω–æ–º–∏—è", "–ë—é–¥–∂–µ—Ç", "–ü—Ä–µ–º–∏—É–º", "–†–æ—Å–∫–æ—à—å"**.
5. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5.
6. –ò–Ω—Ç–µ—Ä–µ—Å—ã ‚Äî –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞: "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", "–ö—Ä–∞—Å–∏–≤—ã–µ –í–∏–¥—ã", "–ö—É–ª—å—Ç—É—Ä–∞", "–ï–¥–∞", "–ù–æ—á–Ω–∞—è –∂–∏–∑–Ω—å", "–û—Ç–¥—ã—Ö".
7. –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ‚Äî —Å—Ç—Ä–æ–∫–∞, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.

**–¢–†–ï–ë–£–ï–¢–°–Ø –°–¢–†–û–ì–û JSON-–û–¢–í–ï–¢:**
–í–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç:

{
  "resp": "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
  "ui": "origin" | "destination" | "groupSize" | "budget" | "tripDuration" | "interests" | "specialNeeds" | "final"
}

**–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**
- –ü—Ä–∏–Ω–∏–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã —Ä–æ–≤–Ω–æ –∫–∞–∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã (–¥–ª—è group size, budget –∏ —Ç.–¥.).
- –î–ª—è origin/destination ‚Äî –ø—Ä–∏–Ω–∏–º–∞–π –ª—é–±—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –Ω–µ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏.
- –ó–∞–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ markdown.
`;

const FINAL_PROMPT = `
–ò—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ **—Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON**.
–í–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:

{
  "trip_plan": {
    "origin": "string",
    "destination": "string",
    "duration": "number",
    "budget": "string",
    "group_size": "string",
    "interests": ["string"],
    "special_needs": "string",
    "hotels": [
      {
        "hotel_name": "string",
        "hotel_address": "string",
        "price_per_night": "number",
        "hotel_image_url": "string",
        "geo_coordinates": {
          "latitude": "number",
          "longitude": "number"
        },
        "rating": "number",
        "description": "string"
      }
    ],
    "itinerary": [
      {
        "day": "number",
        "day_plan": "string",
        "best_time_to_visit_day": "string",
        "activities": [
          {
            "place_name": "string",
            "place_details": "string",
            "place_image_url": "string",
            "geo_coordinates": {
              "latitude": "number",
              "longitude": "number"
            },
            "place_address": "string",
            "ticket_pricing": "string",
            "time_travel_each_location": "string",
            "best_time_to_visit": "string"
          }
        ]
      }
    ]
  }
}

**–í–∞–∂–Ω–æ:**
- –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ markdown –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–æ–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö.
- –í—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏, —á–∏—Å–ª–∞ ‚Äî –∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–∞–º–∏.
- –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ("resp") –≤—Å–µ–≥–¥–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
`;

export function cleanJSON(content: string) {
    // –£–¥–∞–ª—è–µ–º markdown-—Ä–∞–∑–º–µ—Ç–∫—É –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    return content.replace(/```json/g, "")
        .replace(/```/g, "")
        .replace(/\n/g, "")
        .replace(/\s{2,}/g, " ")
        .replace(/\r?\n|\r/g, "")
        .trim();
}

export function safeParseJSON(jsonString: string) {
    const cleaned = cleanJSON(jsonString);
    try {
        return { ok: true, data: JSON.parse(cleaned) };
    } catch (error: any) {
        return { ok: false, raw: jsonString, error: error.message };
    }
}

export async function POST(req: NextRequest) {
    try {
        const { messages, isFinal } = await req.json();

        // await aj.protect(req, { userId: user?.userId ?? "", requested: isFinal ? 5 : 0 });
        const user = await getServerUser();
        if (!user) {
            return NextResponse.json({ error: "No authorized"})
        }

        if (!user?.isPrem) {
            const decision = await aj.protect(req, { userId: user.userId, requested: 1 });

            if (decision.isDenied()) {
                return NextResponse.json({ error: "Free limit exceeded", redirect: "/premium" }, { status: 403 });
            }
        }

        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });


        const fullPrompt = [
            { role: "system", content: isFinal ? FINAL_PROMPT : PROMPT },
            ...messages.map(({ role, content }: any) => ({ role, content }))
        ];
        console.log(fullPrompt)

        const result = await model.generateContent(fullPrompt.map(m => m.content).join("\n"));



        const parsed = safeParseJSON(result.response.text());
        console.log('PARSED RESULT === ')
        console.log(parsed)
        if (!parsed.ok) {
            return NextResponse.json({ error: "Invalid JSON from Gemini", raw: result.response.text() }, { status: 500 });
        }

        return NextResponse.json(parsed.data);

    } catch (err: any) {
        const error = handleGeminiError(err);
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /api/budget Gemini SDK:", err);

        if (error.isLocationError) {
            return NextResponse.json({ error: error.message, code: "LOCATION_BLOCKED" }, { status: 403 });
        }
        if (err?.response?.status === 429) {
            return NextResponse.json(
                { error: "üö¶ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ API-–∫–ª—é—á –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", code: "QUOTA_EXCEEDED" },
                { status: 429 }
            );
        }

        return NextResponse.json({ error: error.message }, { status: 500 });
    }
}
